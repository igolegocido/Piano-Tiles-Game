//
// This is the template for Part 2 of Lab 7.
//
// Paul Chow
// November 2021
//

//
// This is the template for Part 1 of Lab 8.
//
// Paul Chow
// November 2021
//

// iColour is the colour for the box
//
// oX, oY, oColour and oPlot should be wired to the appropriate ports on the VGA controller
//

// Some constants are set as parameters to accommodate the different implementations
// X_SCREEN_PIXELS, Y_SCREEN_PIXELS are the dimensions of the screen
//       Default is 160 x 120, which is size for fake_fpga and baseline for the DE1_SoC vga controller
// CLOCKS_PER_SECOND should be the frequency of the clock being used.

module part1(iColour,iResetn,iClock,iClick, oX,oY,oColour,oPlot, oDone);
   input wire [2:0] iColour;
   input wire 	    iResetn;
   input wire 	    iClock;s
	input wire 		 iClick;
   output wire [7:0] oX;         // VGA pixel coordinates
   output wire [6:0] oY;

   output wire [2:0] oColour;     // VGA pixel colour (0-7)
   output wire 	     oPlot;       // Pixel drawn enable
   output wire       oDone;

   parameter
     X_BOXSIZE = 8'd4,   // Box X dimension
     Y_BOXSIZE = 7'd4,   // Box Y dimension
     X_SCREEN_PIXELS = 9,  // X screen width for starting resolution and fake_fpga
     Y_SCREEN_PIXELS = 7,  // Y screen height for starting resolution and fake_fpga
     CLOCKS_PER_SECOND = 5000, // 5 KHZ for fake_fpga
     X_MAX = X_SCREEN_PIXELS - 1 - X_BOXSIZE, // 0-based and account for box width
     Y_MAX = Y_SCREEN_PIXELS - 1 - Y_BOXSIZE,

     FRAMES_PER_UPDATE = 15,
     PULSES_PER_SIXTIETH_SECOND = CLOCKS_PER_SECOND / 60
	       ;

   //
   // Your code goes here
	wire gameover;
	
	wire DelayCounter,nextFrame;
	wire[5:0] FrameCounter;
	wire [$clog2(PULSES_PER_SIXTIETH_SECOND:0] Counter;
	
	wire ld_play, ld_wait, ld_clear;
	
	control c0(iClock, iResetn, iClick, ld_play, ld_wait, ld_clear, oPlot, oDone, gameover);
	
	datapath #(X_BOXSIZE, Y_BOXSIZE, X_SCREEN_PIXELS, Y_SCREEN_PIXELS. CLOCKS_PER_SECOND,X_MAX, Y_MAX, FRAMES_PER_UPDATE,PULSES_PER_SIXTIETH_SECOND) d0(iClock, iResetn, iClick, ld_play, ld_wait, ld_clear, oX, oY, oDone, oColour);
	
   //


endmodule // part1


module control(iClock, iResetn, iClick, ld_play, ld_wait, ld_clear, oPlot, oDone, gameover);
	
	input iClock, iResetn, iClick, oDone, gameover;
	output reg ld_play, ld_wait, ld_clear, oPlot;

	reg [3:0] current_state, next_state;
	
	localparam 	S_START = 2'd0,
					S_PLAY = 2'd1,
					S_LOST = 2'd2,
					S_WAIT = 2'd3,
					S_CLEAR = 2'd4;
					
	always@(*)
   begin: state_table
			case(current_state)
				S_START: next_state = iClick ? S_PLAY : S_START;
				S_PLAY: begin
					if(clear)
						next_state = S_CLEAR;
					else if(gameover)
						next_state =  S_LOST;
					else 
						next_state = oDone ? S_WAIT : S_PLAY;
				end
				S_CLEAR: next_state = oDone? S_PLAY : S_CLEAR;
				S_WAIT: next_state = nextFrame ? S_PLAY : S_WAIT;
				S_LOST: next_state = S_LOST;
				default next_state = S_LOST;
			endcase
	end
			
	always @(*)
   begin: enable_signals
		
		ld_play = 1'b0;
		oPlot = 1'b0;
		ld_wait = 1'b0;
		ld_clear = 1'b0;
		
		case(current_state)
			S_PLAY: begin
				ld_play = 1'b1;
				oPlot = 1'b1;
				
			end
			S_CLEAR: begin
				
				ld_clear = 1'b1;
				oPlot = 1'b1;
				
			end
			S_WAIT: begin
				ld_wait = 1'b1;
			end
			S_LOST: begin
				ld_clear = 1'b1;
				oPlot = 1'b1;
			end
		endcase
	end

	always@(posedge iClock)
    begin: state_FFs
        if(~iResetn) begin
            current_state <= S_START;
        else
            current_state <= next_state;
    end // state_FFS
endmodule

module datapath(iClock, iResetn, iClick, ld_play, ld_wait, ld_clear, oX, oY, oDone, oColour);

	parameter
     X_BOXSIZE = 8'd4,   // Box X dimension
     Y_BOXSIZE = 7'd4,   // Box Y dimension
     X_SCREEN_PIXELS = 9,  // X screen width for starting resolution and fake_fpga
     Y_SCREEN_PIXELS = 7,  // Y screen height for starting resolution and fake_fpga
     CLOCKS_PER_SECOND = 5000, // 5 KHZ for fake_fpga
     X_MAX = X_SCREEN_PIXELS - 1 - X_BOXSIZE, // 0-based and account for box width
     Y_MAX = Y_SCREEN_PIXELS - 1 - Y_BOXSIZE,

     FRAMES_PER_UPDATE = 15,
     PULSES_PER_SIXTIETH_SECOND = CLOCKS_PER_SECOND / 60

	input iClock, iResetn, iClick, ld_play, ld_wait, ld_clear;
	
	output reg [7:0] oX;
	output reg [6:0] oY;
	output reg [2:0] oColour;
	output reg oDone;
	
	reg [7:0] X;
	reg [6:0] Y;
	reg [2:0] Colour;
	
	reg [2:0] CountX, CountY;
	reg black, predone;
	
	always@(posedge iClock) begin
        if(~iResetn) begin
            X <= 8'b0;
            Y <= 7'b0;
            Colour <= 3'b0; 
				oDone <= 1'b0;
				oX <= 1'b0;
				oY <= 1'b0;
				oColour <= 3'b0;
				CountX <= 1'b0;
				CountY <= 1'b0;
				black <= 1'b0;
				predone <= 1'b0;
				
        end
        else begin
					
				if(iClick) begin
					Y <= 7'b0;
					X <= 8'b1;
					
				
				end
				if(ld_play) begin
					oX <= X + CountX;
					oY <= Y + CountY;
					if(Y + CountY == Y_SCREEN_PIXELS) begin
						gameover = 1'b1;
					end else if(CountX == X_BOXSIZE & CountY < Y_BOXSIZE+1'b1)begin
						oDone = 1'b1;
					end else if(CountX == X_BOXSIZE) begin
						CountY <= CountY + 1'b1;
						CountX <= 1b'0;
					end else 
						CountX <= CountX + 1'b1;
					if(CountY == 2'b0) begin
						oColour = 3'b0;
					end else 
						oColour = 3'b111;
							
				end
				if(ld_wait) begin
					Counter++;
					if(Counter == PULSES_PER_SIXTIETH_SECOND) begin
						DelayCounter = 1'b1;
						Counter = 1'b0;
						FrameCounter <= FrameCounter + 1'd1;
						
					end else begin
						DelayCounter = 1'b1;
					end
					if(FrameCounter == 5'd15) begin
						Y <= Y + 1'd1;
						nextFrame = 1'b1;
					end
				end
				if(ld_clear) begin
				
					if(~black) begin
						oX = 8'b0;
						oY = 8'b0;
						black = 1'b1;
					end else begin
					
				
						oDone <= 1'b0;
						oColour <= 3'b0;
						
						if(oY <= Y_SCREEN_PIXELS) begin
							oDone <= 1'b1;
							black = 1'b0;
						end else if(oX == X_SCREEN_PIXELS) begin
						
							oX <= 8'd0;
							oY <= oY + 7'd1;
							
						end else
							oX <= oX + 8'd1;
					end
				end
				
		end
	end
	
	
endmodule

